possibleValues = c("A", "B", "C", "D")
numberOfSamples = 2
sampleLength = 500
sample = matrix(ncol = numberOfSamples, nrow = sampleLength)
for (i in 1:numberOfSamples) {
for (j in 1:2) {
sample[j, i] = sample(possibleValues, size = 1, replace = TRUE)
}
}
for (i in 1:numberOfSamples) {
for (j in 3:sampleLength) {
sample[j, i] = sample(c(rep(sample[j - 2, i], 2), rep(sample[j - 1, i], 3), possibleValues), size = 1, replace = TRUE)
}
}
#maximum likelihood m√≥dszer
shift1 <- function(col) {
return(rbind(head(col, -1), col[0:-1]))
}
shift2 <- function(col) {
return(rbind(paste0(head(col, -2), head(col[-1], -1)), col[-1:-2]))
}
shift3 <- function(col) {
return(rbind(paste0(head(col, -3), head(col[-1], -2), head(col[-1:-2], -1)), col[-1:-3]))
}
calculateFrequencies <- function(order, sample) {
frequencies <- apply(sample, 2, paste0("shift", order))
frequencies <- data.frame(t(matrix(frequencies, nrow = 2)))
names(frequencies) <- c("From", "To")
return(table(frequencies))
}
calculateTransitionMatrix <- function(order, sample) {
frequencies = calculateFrequencies(order, sample)
transitionMatrix = frequencies / rowSums(frequencies)
return(transitionMatrix)
}
calculateAverageRank <- function(order, sample) {
averageRank = 0
transitionMatrix = calculateTransitionMatrix(order, sample)
frequencies = calculateFrequencies(order, sample)
for (k in 1:length(possibleValues)^order) {
for (i in 1:length(possibleValues)) {
for (j in 1:length(possibleValues)) {
if (transitionMatrix[k, i] == sort(transitionMatrix[k,], decreasing = TRUE)[j]) {
averageRank = averageRank + frequencies[k, i] * j
}
}
}
}
averageRank = averageRank / sum(frequencies)
return(averageRank)
}
calculateAverageRank <- function(order, sample, sample2) {
averageRank = 0
transitionMatrix = calculateTransitionMatrix(order, sample)
frequencies = calculateFrequencies(order, sample2)
for (k in 1:length(possibleValues)^order) {
for (i in 1:length(possibleValues)) {
for (j in 1:length(possibleValues)) {
if (transitionMatrix[k, i] == sort(transitionMatrix[k,], decreasing = TRUE)[j]) {
averageRank = averageRank + frequencies[k, i] * j
}
}
}
}
averageRank = averageRank / sum(frequencies)
return(averageRank)
}
calculateAverageRank(1, sample[1:250,], sample[251:500,])
calculateAverageRank(2, sample[1:250,], sample[251:500,])
calculateAverageRank(3, sample[1:250,], sample[251:500,])
possibleValues = c("A", "B", "C", "D")
numberOfSamples = 1
sampleLength = 500
sample = matrix(ncol = numberOfSamples, nrow = sampleLength)
for (i in 1:numberOfSamples) {
for (j in 1:2) {
sample[j, i] = sample(possibleValues, size = 1, replace = TRUE)
}
}
for (i in 1:numberOfSamples) {
for (j in 3:sampleLength) {
sample[j, i] = sample(c(rep(sample[j - 2, i], 2), rep(sample[j - 1, i], 3), possibleValues), size = 1, replace = TRUE)
}
}
calculateAverageRank(1, sample[1:250,], sample[251:500,])
possibleValues = c("A", "B", "C", "D")
numberOfSamples = 2
sampleLength = 500
sample = matrix(ncol = numberOfSamples, nrow = sampleLength)
for (i in 1:numberOfSamples) {
for (j in 1:2) {
sample[j, i] = sample(possibleValues, size = 1, replace = TRUE)
}
}
for (i in 1:numberOfSamples) {
for (j in 3:sampleLength) {
sample[j, i] = sample(c(rep(sample[j - 2, i], 2), rep(sample[j - 1, i], 3), possibleValues), size = 1, replace = TRUE)
}
}
calculateAverageRank(1, sample[1:250,], sample[251:500,])
calculateAverageRank(2, sample[1:250,], sample[251:500,])
calculateAverageRank <- function(order, sample, sample2) {
averageRank = 0
transitionMatrix = calculateTransitionMatrix(order, sample)
print(transitionMatrix)
frequencies = calculateFrequencies(order, sample2)
for (k in 1:length(possibleValues)^order) {
for (i in 1:length(possibleValues)) {
for (j in 1:length(possibleValues)) {
if (transitionMatrix[k, i] == sort(transitionMatrix[k,], decreasing = TRUE)[j]) {
averageRank = averageRank + frequencies[k, i] * j
}
}
}
}
averageRank = averageRank / sum(frequencies)
return(averageRank)
}
calculateAverageRank(2, sample[1:250,], sample[251:500,])
possibleValues = c("A", "B", "C", "D")
numberOfSamples = 2
sampleLength = 1000
sample = matrix(ncol = numberOfSamples, nrow = sampleLength)
for (i in 1:numberOfSamples) {
for (j in 1:2) {
sample[j, i] = sample(possibleValues, size = 1, replace = TRUE)
}
}
for (i in 1:numberOfSamples) {
for (j in 3:sampleLength) {
sample[j, i] = sample(c(rep(sample[j - 2, i], 2), rep(sample[j - 1, i], 3), possibleValues), size = 1, replace = TRUE)
}
}
calculateAverageRank(1, sample[1:500,], sample[501:500,])
calculateAverageRank(1, sample[1:500,], sample[501:1000,])
calculateAverageRank(2, sample[1:500,], sample[501:1000,])
possibleValues = c("A", "B", "C", "D")
numberOfSamples = 2
sampleLength = 3000
sample = matrix(ncol = numberOfSamples, nrow = sampleLength)
for (i in 1:numberOfSamples) {
for (j in 1:2) {
sample[j, i] = sample(possibleValues, size = 1, replace = TRUE)
}
}
for (i in 1:numberOfSamples) {
for (j in 3:sampleLength) {
sample[j, i] = sample(c(rep(sample[j - 2, i], 2), rep(sample[j - 1, i], 3), possibleValues), size = 1, replace = TRUE)
}
}
calculateAverageRank(1, sample[1:1500,], sample[1501:3000,])
calculateAverageRank(2, sample[1:1500,], sample[1501:3000,])
shiftTwoStep1 <- function(col) {
return(rbind(head(col, -1), col[0:-1]))
}
shiftTwoStep2 <- function(col) {
return(rbind(paste0(head(col, -2), head(col[-1], -1)), paste0(head(col[-1], -1), col[-1:-2])))
}
shiftTwoStep3 <- function(col) {
return(rbind(paste0(head(col, -3), head(col[-1], -2), head(col[-1:-2], -1)), paste0(head(col[-1], -2), head(col[-1:-2], -1), col[-1:-3])))
}
calculateTwoStep <- function(order) {
transitions <- apply(sample, 2, paste0("shiftTwoStep", order))
transitions <- data.frame(t(matrix(transitions, nrow = 2)))
names(transitions) <- c("From", "To")
frequencies <- table(transitions)
transitionMatrix <- frequencies / rowSums(frequencies)
NormalisedEigenVector = eigen(t(transitionMatrix))$vectors[,1] / sum(eigen(t(transitionMatrix))$vectors[,1])
transitionMatrixSquared = transitionMatrix %*% transitionMatrix
A = vector(length = length(possibleValues) ^ order)
for (i in 1:length(possibleValues) ^ order) {
A[i] = sum(transitionMatrixSquared[i, seq(i %% length(possibleValues), length(possibleValues) ^ order, by = length(possibleValues))])
}
return(A %*% NormalisedEigenVector)
}
calculateEntropyRate <- function(order) {
transitions <- apply(sample, 2, paste0("shiftTwoStep", order))
transitions <- data.frame(t(matrix(transitions, nrow = 2)))
names(transitions) <- c("From", "To")
frequencies <- table(transitions)
transitionMatrix <- frequencies / rowSums(frequencies)
NormalisedEigenVector = eigen(t(transitionMatrix))$vectors[,1] / sum(eigen(t(transitionMatrix))$vectors[,1])
A = vector(length = length(possibleValues) ^ order)
for (i in 1:length(possibleValues)^order) {
logTransitionMatrix = log(transitionMatrix)[i]
logTransitionMatrix[logTransitionMatrix == -Inf] = 0
A[i] = sum((transitionMatrix * logTransitionMatrix)[i]) * NormalisedEigenVector[i]
}
return(sum(A))
}
calculateEntropyRate(1)
calculateEntropyRate(2)
calculateEntropyRate(3)
calculateEntropyRate <- function(order) {
transitions <- apply(sample, 2, paste0("shiftTwoStep", order))
transitions <- data.frame(t(matrix(transitions, nrow = 2)))
names(transitions) <- c("From", "To")
frequencies <- table(transitions)
transitionMatrix <- frequencies / rowSums(frequencies)
NormalisedEigenVector = eigen(t(transitionMatrix))$vectors[,1] / sum(eigen(t(transitionMatrix))$vectors[,1])
A = vector(length = length(possibleValues) ^ order)
for (i in 1:length(possibleValues)^order) {
logTransitionMatrix = log(transitionMatrix)[i]
logTransitionMatrix[logTransitionMatrix == -Inf] = 0
A[i] = sum((transitionMatrix * logTransitionMatrix)[i]) * NormalisedEigenVector[i]
}
return(-sum(A))
}
calculateEntropyRate(1)
calculateEntropyRate(2)
calculateEntropyRate(3)
calculateEntropyRate <- function(order) {
transitions <- apply(sample, 2, paste0("shiftTwoStep", order))
transitions <- data.frame(t(matrix(transitions, nrow = 2)))
names(transitions) <- c("From", "To")
frequencies <- table(transitions)
transitionMatrix <- frequencies / rowSums(frequencies)
NormalisedEigenVector = eigen(t(transitionMatrix))$vectors[,1] / sum(eigen(t(transitionMatrix))$vectors[,1])
print(NormalisedEigenVector)
A = vector(length = length(possibleValues) ^ order)
for (i in 1:length(possibleValues)^order) {
logTransitionMatrix = log(transitionMatrix)[i]
logTransitionMatrix[logTransitionMatrix == -Inf] = 0
A[i] = sum((transitionMatrix * logTransitionMatrix)[i]) * NormalisedEigenVector[i]
}
return(-sum(A))
}
calculateEntropyRate(3)
